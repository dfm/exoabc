#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import division, print_function

import os
import json
import time
import argparse
from collections import Counter

import h5py
import numpy as np
from scipy.stats import ks_2samp

import tqdm

from exoabc import Simulator, data, config, completeness

parser = argparse.ArgumentParser()
parser.add_argument("runid")
parser.add_argument("--config")
parser.add_argument("--save-plot")
parser.add_argument("-v", "--verbose", action="store_true")
args = parser.parse_args()

# Read the config file.
c = config.parse_config(filename=args.config)
prefix = c["data release"]["prefix"]
if prefix not in ["q1_q16", "q1_q17_dr24"]:
    raise ValueError("invalid prefix: {0}".format(prefix))

# Load the sample.
stlr = data.get_sample("stellar", prefix=prefix, **(c["stars"]))
kois = data.get_sample("koi", prefix=prefix, join=stlr, **(c["candidates"]))

# Summarize the sample.
summary = "prefix = {0}\nlen(stlr) = {1}\nlen(kois) = {2}\n".format(
    prefix, len(stlr), len(kois)
)
if args.verbose:
    print(summary)

# Calibrate the completeness.
if prefix == "q1_q17_dr24":
    period_bins, params = completeness.calibrate_dr24_completness(
        stlr, plot=args.save_plot, **(c["data release"]))
else:
    period_bins = None
    params = None

sim = Simulator.from_config_args(
    stlr,
    completeness_params=params,
    period_bin_edges=period_bins,
    release=prefix,
    seed=int(os.getpid() + 1000*time.time()) % 20000,
    **(c["simulator"])
)

# Some global parameters
maxn = c["simulator"]["maxn"]
period_range = c["stats"]["period"]
prad_range = c["stats"]["radius"]
depth_range = c["stats"]["depth"]

def compute_stats(catalog):
    m = (period_range[0] <= catalog.koi_period)
    m &= (catalog.koi_period <= period_range[1])
    m &= (prad_range[0] <= catalog.koi_prad)
    m &= (catalog.koi_prad <= prad_range[1])
    m &= (depth_range[0] <= catalog.koi_depth)
    m &= (catalog.koi_depth <= depth_range[1])
    c = catalog[m]

    # Multiplicity
    h = Counter(Counter(c.kepid).values())
    hist = np.zeros(maxn+1, dtype=int)
    for i in range(1, maxn+1):
        hist[i] = h.get(i, 0)
    hist[0] = len(stlr) - np.sum(hist[1:])

    return (
        hist, np.array(c.koi_period), np.array(c.koi_depth),
        np.array(c.koi_duration)
    )
obs_stats = compute_stats(kois)

def compute_distances(ds1, ds2):
    n1 = np.sum(ds1[0][1:])
    n2 = np.sum(ds2[0][1:])
    multi_dist_1 = (np.log(n1)-np.log(n2))**2
    multi_dist_2 = np.mean((np.log(ds1[0]+1) - np.log(ds2[0]+1))**2.0)
    period_dist = ks_2samp(ds1[1], ds2[1]).statistic
    depth_dist = ks_2samp(ds1[2], ds2[2]).statistic
    dur_dist = ks_2samp(ds1[3], ds2[3]).statistic
    return (multi_dist_1, multi_dist_2, period_dist, depth_dist, dur_dist)

def sample(initial):
    # Sample the hyperparamters
    lp = sim.sample_parameters()
    if not np.isfinite(lp):
        return None

    # Simulate the population
    df = sim.sample_population()
    if len(df) <= 1:
        return None

    # Build the output
    pars, state = sim.get_parameters(), sim.state
    mu = sim.mean_multiplicity()
    zero = sim.evaluate_multiplicity(np.zeros(1))[0]
    dist = compute_distances(obs_stats, compute_stats(df))
    return dist, pars, state, mu, zero

def parse_samples(samples):
    samples = [s for s in samples if s is not None and
               np.all(np.isfinite(s[0]))]
    return map(np.array, zip(*samples))

fn = "{0}.h5".format(args.runid)
with h5py.File(fn, "w") as f:
    f.attrs["period_bins"] = period_bins
    f.attrs["completeness_params"] = params
    f.attrs["config"] = np.void(json.dumps(c).encode("utf-8"))
    f.attrs["maxn"] = c["simulator"]["maxn"]
    for i in range(len(obs_stats)):
        f.attrs["obs_stats_{0}".format(i)] = obs_stats[i]


for it in range(c["sampling"]["number_of_batches"]):
    N = c["sampling"]["batch_size"]
    rhos, thetas, states, mus, zeros = parse_samples(map(
        sample, tqdm.tqdm((None for _ in range(N)), total=N)))
    weights = np.ones(len(rhos)) / len(rhos)

    with h5py.File(fn, "a") as f:
        f.attrs["iteration"] = it
        if it == 0:
            f.create_dataset("rho", data=rhos,
                             maxshape=tuple([None]+list(rhos.shape[1:])))
            f.create_dataset("theta", data=thetas,
                             maxshape=tuple([None]+list(thetas.shape[1:])))
            f.create_dataset("state", data=states,
                             maxshape=tuple([None]+list(states.shape[1:])))
            f.create_dataset("expected_number", data=mus,
                             maxshape=tuple([None]+list(mus.shape[1:])))
            f.create_dataset("log_rate_zero", data=zeros,
                             maxshape=tuple([None]+list(zeros.shape[1:])))
        else:
            for k, v in zip(["rho", "theta", "state", "expected_number",
                             "log_rate_zero"],
                            [rhos, thetas, states, mus, zeros]):
                n = f[k].shape[0]
                f[k].resize(n + v.shape[0], axis=0)
                f[k][n:] = v
